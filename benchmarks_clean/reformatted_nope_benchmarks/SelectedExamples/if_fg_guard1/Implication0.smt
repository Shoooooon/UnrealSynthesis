;test
(set-info :smt-lib-version 2.6)
(set-info :status unsat)
(set-logic NIA)
(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(declare-const d Int)
(declare-const fresh1_finitevscpy_1 Int)
(declare-const fresh1_finitevscpy_2 Int)
(declare-const fresh1_finitevscpy_3 Int)
(declare-const fresh1_finitevscpy_4 Int)
(declare-const x_finitevscpy_1 Int)
(declare-const x_finitevscpy_2 Int)
(declare-const x_finitevscpy_3 Int)
(declare-const x_finitevscpy_4 Int)
(declare-const y_finitevscpy_1 Int)
(declare-const y_finitevscpy_2 Int)
(declare-const y_finitevscpy_3 Int)
(declare-const y_finitevscpy_4 Int)
(declare-const z_finitevscpy_1 Int)
(declare-const z_finitevscpy_2 Int)
(declare-const z_finitevscpy_3 Int)
(declare-const z_finitevscpy_4 Int)
(assert
(not
(=> (and (and (and (and (and (and (and (and (and (and (and (and (and true (= x_finitevscpy_1 3)) (= y_finitevscpy_1 6)) (= z_finitevscpy_1 0)) (= x_finitevscpy_2 2)) (= y_finitevscpy_2 3)) (= z_finitevscpy_2 0)) (= x_finitevscpy_3 4)) (= y_finitevscpy_3 3)) (= z_finitevscpy_3 0)) (= x_finitevscpy_4 (- 2))) (= y_finitevscpy_4 3)) (= z_finitevscpy_4 0)) (and (and (or (< 0 a) (= 0 a)) (and (or (< 0 b) (= 0 b)) (and (or (< 0 c) (= 0 c)) (or (< 0 d) (= 0 d))))) (and (= (+ d (+ (* a x_finitevscpy_1) (+ (* b y_finitevscpy_1) (* c z_finitevscpy_1)))) fresh1_finitevscpy_1) (and (= (+ d (+ (* a x_finitevscpy_2) (+ (* b y_finitevscpy_2) (* c z_finitevscpy_2)))) fresh1_finitevscpy_2) (and (= (+ d (+ (* a x_finitevscpy_3) (+ (* b y_finitevscpy_3) (* c z_finitevscpy_3)))) fresh1_finitevscpy_3) (= (+ d (+ (* a x_finitevscpy_4) (+ (* b y_finitevscpy_4) (* c z_finitevscpy_4)))) fresh1_finitevscpy_4)))))) (not (and (and (and (and true (= fresh1_finitevscpy_1 9)) (= fresh1_finitevscpy_2 5)) (= fresh1_finitevscpy_3 7)) (= fresh1_finitevscpy_4 (- 5)))))
)
 )
(check-sat)
(exit)