;test
(set-info :smt-lib-version 2.6)
(set-info :status unsat)
(set-logic NIA)
(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(declare-const fresh1_finitevscpy_1 Int)
(declare-const fresh1_finitevscpy_2 Int)
(declare-const fresh1_finitevscpy_3 Int)
(declare-const fresh2_finitevscpy_1 Int)
(declare-const fresh2_finitevscpy_2 Int)
(declare-const fresh2_finitevscpy_3 Int)
(declare-const fresh3 Int)
(declare-const fresh4 Int)
(declare-const fresh5 Int)
(declare-const x_finitevscpy_1 Int)
(declare-const x_finitevscpy_2 Int)
(declare-const x_finitevscpy_3 Int)
(declare-const y_finitevscpy_1 Int)
(declare-const y_finitevscpy_2 Int)
(declare-const y_finitevscpy_3 Int)
(assert
(not
(=> (and true (and (and (and (or (< 0 a) (= 0 a)) (and (or (< 0 b) (= 0 b)) (or (< 0 c) (= 0 c)))) (and (= (+ c (+ (* a x_finitevscpy_1) (* b y_finitevscpy_1))) fresh1_finitevscpy_1) (and (= (+ c (+ (* a x_finitevscpy_2) (* b y_finitevscpy_2))) fresh1_finitevscpy_2) (= (+ c (+ (* a x_finitevscpy_3) (* b y_finitevscpy_3))) fresh1_finitevscpy_3)))) (and (and (or (< 0 fresh5) (= 0 fresh5)) (and (or (< 0 fresh4) (= 0 fresh4)) (or (< 0 fresh3) (= 0 fresh3)))) (and (= (+ fresh3 (+ (* fresh5 x_finitevscpy_1) (* fresh4 y_finitevscpy_1))) fresh2_finitevscpy_1) (and (= (+ fresh3 (+ (* fresh5 x_finitevscpy_2) (* fresh4 y_finitevscpy_2))) fresh2_finitevscpy_2) (= (+ fresh3 (+ (* fresh5 x_finitevscpy_3) (* fresh4 y_finitevscpy_3))) fresh2_finitevscpy_3)))))) (exists ((c Int) ) (exists ((b Int) ) (exists ((a Int) ) (and (and (or (< 0 a) (= 0 a)) (and (or (< 0 b) (= 0 b)) (or (< 0 c) (= 0 c)))) (and (= (+ c (+ (* a x_finitevscpy_1) (* b y_finitevscpy_1))) (+ fresh1_finitevscpy_1 fresh2_finitevscpy_1)) (and (= (+ c (+ (* a x_finitevscpy_2) (* b y_finitevscpy_2))) (+ fresh1_finitevscpy_2 fresh2_finitevscpy_2)) (= (+ c (+ (* a x_finitevscpy_3) (* b y_finitevscpy_3))) (+ fresh1_finitevscpy_3 fresh2_finitevscpy_3)))))))))
)
 )
(check-sat)
(exit)