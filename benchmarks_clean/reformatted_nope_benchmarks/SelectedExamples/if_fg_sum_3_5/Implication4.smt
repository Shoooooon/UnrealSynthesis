;test
(set-info :smt-lib-version 2.6)
(set-info :status unsat)
(set-logic NIA)
(declare-const x1_finitevscpy_1 Int)
(declare-const x1_finitevscpy_2 Int)
(declare-const x1_finitevscpy_3 Int)
(declare-const x1_finitevscpy_4 Int)
(declare-const x1_finitevscpy_5 Int)
(declare-const x1_finitevscpy_6 Int)
(declare-const x1_finitevscpy_7 Int)
(declare-const x1_finitevscpy_8 Int)
(declare-const x1_finitevscpy_9 Int)
(declare-const x2_finitevscpy_1 Int)
(declare-const x2_finitevscpy_2 Int)
(declare-const x2_finitevscpy_3 Int)
(declare-const x2_finitevscpy_4 Int)
(declare-const x2_finitevscpy_5 Int)
(declare-const x2_finitevscpy_6 Int)
(declare-const x2_finitevscpy_7 Int)
(declare-const x2_finitevscpy_8 Int)
(declare-const x2_finitevscpy_9 Int)
(declare-const x3_finitevscpy_1 Int)
(declare-const x3_finitevscpy_2 Int)
(declare-const x3_finitevscpy_3 Int)
(declare-const x3_finitevscpy_4 Int)
(declare-const x3_finitevscpy_5 Int)
(declare-const x3_finitevscpy_6 Int)
(declare-const x3_finitevscpy_7 Int)
(declare-const x3_finitevscpy_8 Int)
(declare-const x3_finitevscpy_9 Int)
(assert
(not
(=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and true (= x1_finitevscpy_1 0)) (= x2_finitevscpy_1 0)) (= x3_finitevscpy_1 0)) (= x1_finitevscpy_2 (- 1))) (= x2_finitevscpy_2 0)) (= x3_finitevscpy_2 (- 1))) (= x1_finitevscpy_3 0)) (= x2_finitevscpy_3 (- 1))) (= x3_finitevscpy_3 0)) (= x1_finitevscpy_4 6)) (= x2_finitevscpy_4 0)) (= x3_finitevscpy_4 (- 1))) (= x1_finitevscpy_5 0)) (= x2_finitevscpy_5 1)) (= x3_finitevscpy_5 5)) (= x1_finitevscpy_6 4)) (= x2_finitevscpy_6 4)) (= x3_finitevscpy_6 2)) (= x1_finitevscpy_7 3)) (= x2_finitevscpy_7 4)) (= x3_finitevscpy_7 1)) (= x1_finitevscpy_8 4)) (= x2_finitevscpy_8 1)) (= x3_finitevscpy_8 2)) (= x1_finitevscpy_9 4)) (= x2_finitevscpy_9 4)) (= x3_finitevscpy_9 3)) (not (and (and (and (and (and (and (and (and (and true (= 0 0)) (= 0 0)) (= 0 0)) (= 0 6)) (= 0 6)) (= 0 6)) (= 0 7)) (= 0 0)) (= 0 8))))
)
 )
(check-sat)
(exit)